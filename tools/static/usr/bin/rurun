#! /bin/bash
#
# rurun

# license--start
#
# Copyright 2012 John Marshall
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# license--end

function print_usage {
	echo "\
usage: ${PROG_NAME} [options] <target> <arg> ...
       ${PROG_NAME} [--pnet <addr>] --count

Launch a program on a pnet target. If a pnet server specified
(command line or environment variable), the local host will be used.

If --count is specified, then the number of pnet targets is printed.

Options:
-a|--attr <name>=<value>
	Provide attribute/environment variable settings. A
	comma-separated list of environment variable names in
	\$RURUN_ENV are also passed.
--debug
	Enable debugging. Or set RURUN_DEBUG=1.
--exec simple|shell|login
	Environment to launch with:
	simple - without shell
	shell - shell with basic environment
	login - shell with login environmnet
	Defaults to \$RURUN_EXEC_METHOD or \"${RURUN_EXEC_METHOD}\".
--pnet <addr>
	Use a given pnet address. Defaults to \$RURUN_PNET_ADDR.
--target_method id|host|run
	Method to use to connect to the target: id, host, run.
	Defaults to \$RURUN_TARGET_METHOD or \"${RURUN_TARGET_METHOD}\"."
}

# defaults (null or unset)
PROG_NAME=`basename $0`
export RURUN_EXEC_METHOD=${RURUN_EXEC_METHOD:-shell}
export RURUN_TARGET_METHOD=${RURUN_TARGET_METHOD:-run}

if [ $# -gt 0 ]; then
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
		print_usage
		exit 0
	fi
elif [ $# -lt 2 ]; then
	echo "error: bad/missing arguments" 1>&2
	exit 1
fi


# update attributes/env vars
attrs=()
if [ -n "${RURUN_ENV}" ]; then
	for name in $(echo ${RURUN_ENV} | tr ',' ' '); do
		attrs+=("-a" "${name}='$(printenv ${name})'")
	done
fi

while [ $# -gt 0 ]; do
	case $1 in
	-a|--attr)
		shift 1
		attrs+=("-a" "$1"); shift 1
		;;
	--count)
		shift 1
		count=`ruexec ${RURUN_PNET_ADDR}/count`
		ev=$?
		if [ ${ev} -eq 0 ]; then
			echo ${count}
		fi
		exit ${ev}
		;;
	--debug)
		shift 1
		export RURUN_DEBUG=1
		;;
	--dir)
		shift 1
		RURUN_PNET_DIR="$1"; shift 1
		;;
	--exec)
		shift 1
		RURUN_EXEC_METHOD=$1; shift 1
		;;
	--login)
		shift 1
		RURUN_EXEC_METHOD=login
		;;
	--pnet)
		shift 1
		RURUN_PNET_ADDR="$1"; shift 1
		;;
	--shell)
		shift 1
		RURUN_EXEC_METHOD=shell
		;;
	--simple)
		shift 1
		RURUN_EXEC_METHOD=simple
		;;
	--target_method)
		shift 1
		RURUN_TARGET_METHOD=$1; shift 1
		;;
	--wrap)
		shift 1
		colon=":"
		;;
	*)
		target=$1; shift 1
		break
		;;
	esac
done

# debugging output
if [ -n "${RURUN_DEBUG}" ]; then
	echo "-----"
	echo "target (${target})"
	echo "RURUN_EXEC_METHOD (${RURUN_EXEC_METHOD})"
	echo "RURUN_PNET_ADDR (${RURUN_PNET_ADDR})"
	echo "RURUN_TARGET_METHOD (${RURUN_TARGET_METHOD})"
	echo "-----"
fi

# set path
if [ -n "${RURUN_PNET_ADDR}" ]; then
	case ${RURUN_TARGET_METHOD} in
	host)
		path="${RURUN_PNET_ADDR}/${RURUN_TARGET_METHOD}/${target}/+/exec/${RURUN_EXEC_METHOD}"
		;;
	id)
		path="${RURUN_PNET_ADDR}/${RURUN_TARGET_METHOD}/${colon}${target}/+/exec/${RURUN_EXEC_METHOD}"
		;;
	run)
		path="${RURUN_PNET_ADDR}/${RURUN_TARGET_METHOD}/${colon}${target}/${RURUN_EXEC_METHOD}"
		;;
	*)
		echo "error: unknown target method (${RURUN_TARGET_METHOD})" 1>&2
		exit 1
		;;
	esac
elif [ -n "${RURUN_PNET_DIR}" ]; then
	case ${RURUN_TARGET_METHOD} in
	id|run)
		path="${RURUN_PNET_DIR}/${RURUN_TARGET_METHOD}/${target}"
		;;
	*)
		echo "error: unknown target method (${RURUN_TARGET_METHOD})" 1>&2
		exit 1
		;;
	esac
else
	echo "error: neither RURUN_PNET_ADDR nor RURUN_PNET_DIR are set" 1>&2
	exit 1
fi

# mpirun-specific
# TODO: eliminate
if [ "${HYDRA_LAUNCHER}" = "ssh" ]; then
	# drop "-x"
	shift 1
fi

# execute
if [ -n "${RURUN_DEBUG}" ]; then
	echo exec ruexec "${attrs[@]}" "${path}" "$*"
fi
exec ruexec "${attrs[@]}" "${path}" "$*"
