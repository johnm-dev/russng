#! /bin/bash
#
# rurun

# license--start
#
# Copyright 2012 John Marshall
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# license--end

function print_usage {
	echo "\
usage: ${PROG_NAME} [options] <target> <arg> ...
       ${PROG_NAME} [--pnet <addr>] --count

Launch a program on a pnet target. If a pnet server specified
(command line or environment variable), the local host will be used.

If --count is specified, then the number of pnet targets is printed.

Options:
-a|--attr <name>=<value>
	Provide attribute/environment variable settings. A
	comma-separated list of environment variable names in
	\$RURUN_ENV are also passed.
--debug
	Enable debugging. Or set RURUN_DEBUG=1.
--exec simple|shell|login
	Environment to launch with:
	simple - without shell
	shell - shell with basic environment
	login - shell with login environment
	Defaults to \$RURUN_EXEC_METHOD or \"${RURUN_EXEC_METHOD_DEFAULT}\".
--pnet <addr>
	Use a given pnet address. Defaults to \$RURUN_PNET_ADDR.
--relay <name>
	Use a given relay service. Defaults to \${RURUN_RELAY} or
	\"${RURUN_RELAY_DEFAULT}\".
--shell <path>
	Alternative shell to run on target. The arguments are passed
	to it for execution. Forces \"--exec simple\".
-t|--timeout <seconds>
	Allow a given amount of time to connect before aborting.
	Defaults to \${RURUN_TIMEOUT} if set."
}

# defaults (null or unset)
PROG_NAME=`basename $0`
RURUN_EXEC_METHOD_DEFAULT=shell
RURUN_RELAY_DEFAULT=ssh
RURUN_SHELL=""
export RURUN_EXEC_METHOD=${RURUN_EXEC_METHOD:-${RURUN_EXEC_METHOD_DEFAULT}}
export RURUN_RELAY=${RURUN_RELAY:-${RURUN_RELAY_DEFAULT}}

if [ $# -gt 0 ]; then
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
		print_usage
		exit 0
	fi
elif [ $# -lt 2 ]; then
	echo "error: bad/missing arguments" 1>&2
	exit 1
fi

attrs=()
mpi=0

while [ $# -gt 0 ]; do
	case $1 in
	-a|--attr)
		shift 1
		attrs+=("-a" "$1"); shift 1
		;;
	--count)
		count_opt=1
		shift 1
		;;
	--debug)
		shift 1
		export RURUN_DEBUG=1
		;;
	--exec)
		shift 1
		RURUN_EXEC_METHOD=$1; shift 1
		;;
	--pnet)
		shift 1
		RURUN_PNET_ADDR="$1"; shift 1
		;;
	--relay)
		shift 1
		RURUN_RELAY="$1"; shift 1
		;;
	--shell)
		shift 1
		RURUN_SHELL="$1"; shift 1
		;;
	-t|--timeout)
		shift 1
		RURUN_TIMEOUT="$1"; shift 1
		;;
	--wrap)
		shift 1
		colon=":"
		;;
	*)
		target=$1; shift 1
		break
		;;
	esac
done

if [ -z "${RURUN_PNET_ADDR}" ]; then
	echo "error: RURUN_PNET_ADDR is not set" 1>&2
	exit 1
fi

# dynamically start pnet server if necessary
if [ -z "${RURUN_PNET_ADDR}" ]; then
	if [ -n "${RURUN_PNET_TARGETSFILE}" ]; then
		export RURUN_PNET_ADDR=$(ruspawn -c main:path=/usr/lib/russng/russpnet/russpnet_server -c "targets:filename=${RURUN_PNET_TARGETSFILE}" -c "main:pgid=$$")
	fi
	if [ -z "${RURUN_PNET_ADDR}" ]; then
		echo "error: RURUN_PNET_ADDR is not set" 1>&2
		exit 1
	fi
	# ensure cleanup of pnet server
	trap "kill -HUP -$$" EXIT
fi

# debugging output
if [ -n "${RURUN_DEBUG}" ]; then
	echo "-----"
	echo "target (${target})"
	echo "RUMPIRUN_ENV (${RUMPIRUN_ENV})"
	echo "RURUN_ENV (${RURUN_ENV})"
	echo "RURUN_EXEC_METHOD (${RURUN_EXEC_METHOD})"
	echo "RURUN_PNET_ADDR (${RURUN_PNET_ADDR})"
	echo "RURUN_RELAY (${RURUN_RELAY})"
	echo "RURUN_SHELL (${RURUN_SHELL})"
	echo "-----"
fi

if [ -n "${count_opt}" ]; then
	count=$(ruexec "${RURUN_PNET_ADDR}/count")
	ev=$?
	if [ ${ev} -eq 0 ]; then
		echo ${count}
	fi
	exit ${ev}
fi

# get env attributes
env=()
if [ -n "${RURUN_ENV}" ]; then
	for name in $(echo ${RURUN_ENV} | tr ',' ' '); do
		env+=("-a" "${name}=$(printenv ${name})")
	done
fi

# select exec method and "shell"
if [ -n "${RURUN_SHELL}" ]; then
	# override
	export RURUN_EXEC_METHOD="simple"
fi

# set path
path="${RURUN_PNET_ADDR}/run/${colon}${target}/${RURUN_EXEC_METHOD}"

# set timeout clause
if [ -n "${RURUN_TIMEOUT}" ]; then
	timeoutcl="-t ${RURUN_TIMEOUT}"
fi

# mpirun-specific
# TODO: eliminate
if [ "${HYDRA_LAUNCHER}" = "ssh" ]; then
	# drop "-x"
	shift 1
fi

# execute
if [ -n "${RURUN_DEBUG}" ]; then
	echo exec ruexec "${timeoutcl}" "${env[@]}" "${attrs[@]}" "${path}" ${RURUN_SHELL} "$*"
fi
if [ -z "${RURUN_SHELL}" ]; then
	ruexec ${timeoutcl} "${env[@]}" "${attrs[@]}" "${path}" "$*"
else
	ruexec ${timeoutcl} "${env[@]}" "${attrs[@]}" "${path}" "${RURUN_SHELL}" "$*"
fi
