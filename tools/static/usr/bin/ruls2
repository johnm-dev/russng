#! /usr/bin/env python
#
# ruls2

# license--start
#
# Copyright 2012 John Marshall
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# license--end

"""Test implementation of ruls with support for spath globbing.
"""

# system imports
import fnmatch
import os
import sys

#
sys.path.insert(0, "/usr/lib/python")
import pyruss

def get_list(spath):
    out = []
    conn = pyruss.dial(pyruss.RUSS_DEADLINE_NEVER, "list", spath, None, None) 
    outfd = conn.get_fd(1)
    while True:
        s = os.read(outfd, 1024)
        if s == "":
            break
        out.append(s)
    conn.close()
    names = filter(None, "".join(out).split("\n"))
    return names

def is_pattern(s):
    return "*" in s or "?" in s or "[" in s or "]" in s

def next(spath, comps):
    spaths = []
    comp = comps[0]
    if is_pattern(comp):
        names = get_list(spath)
        names = fnmatch.filter(names, comp)
    else:
        names = [comp]
    for name in names:
        if spath == None:
            spath2 = name
        else:
            spath2 = spath+"/"+name
        if len(comps) == 1:
            spaths.append(spath2)
        else:
            spaths.extend(next(spath2, comps[1:]))
    #print "comp (%s) comps (%s) names (%s) spaths (%s)" % (comp, comps, names, spaths)
    return spaths

if __name__ == "__main__":
    args = sys.argv[1:]
    spath = args.pop(0)

    if is_pattern(spath):
        comps = spath.split("/")
        spaths = next(None, comps)
    else:
        spaths = get_list(spath)
    print "\n".join(spaths)