#! /bin/bash
#
# rumrun

# license--start
#
# Copyright 2012 John Marshall
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# license--end

# given a targets specification, generate a list of the individual
# target ids. target spec:
# a - individual item
# a:b - range a to b (non-inclusive), step 1
# a:b:c - range a to b (non-inclusive), step c (where c is positive)
function get_target_ids {
	local target_ids=""
	local head rest start end step

	head=""
	rest=$1; shift 1
	while [ -n "${rest}" ]; do
		head=${rest%%,*}
		if [ "${head}" = "${rest}" ]; then
			rest=""
		else
			rest=${rest#*,}
		fi
		start=${head%%:*}
		endstep=${head#*:}
		end=${endstep%%:*}
		step=${endstep#*:}

		# replace strings with integers
		if [ "${start}" = "" ]; then
			start=0
		fi
		if [ "${end}" = "" ]; then
			# implicit use of RURUN_PNET_ADDR
			end=$(rurun --count)
			if [ $? -ne 0 ]; then
				echo "error: bad end" 1>&2
				exit 1
			fi
		fi
		if [ "${step}" = "" ]; then
			step=1
		fi

		# validate
		if [ "${start}" = "${head}" -a "${end}" = "${head}" ]; then
			# single item
			target_ids="${target_ids} ${start}"
		else
			if [ "${step}" = "${endstep}" -a "${end}" = "${endstep}" ]; then
				step=1
			fi
			# range (expect integers)
			if [ ${start} -gt ${end} ]; then
				echo "error: bad range (${start}:${end})" 1>&2
				exit 1
			elif [ ${step} -le 0 ]; then
				echo "error: bad step (${step})" 1>&2
				exit 1
			fi
			while [ ${start} -lt ${end} ]; do
				target_ids="${target_ids} ${start}"
				((start=start+step))
			done
		fi
	done
	echo ${target_ids}
}

function print_usage {
	echo "usage: ${PROG_NAME} [options] <targetspec> <arg> ...

Launch a program on one or more pnet target(s). Uses rurun to do the
launch. See rurun for "rurun options".

targetspec is a comma separated list of one or more of:
* value (e.g., 10)
* start:end (e.g., 0:3 which is equivalent to 0,1,2)
* start:end:step (e.g., 0:4:2 which is equivalent to 0,2)
where start must be less than end, and step must be positive.

Options:
--debug
	Enable debugging. Or set RURUN_DEBUG=1.
--pnet <addr>
	Use a given pnet address. Defaults to \$RURUN_PNET_ADDR.
--rurun <options>
	Option arguments to pass to rurun. Enclose in quotes arguments
	necessary.
-t|--timeout <seconds>
	Allow a given amount of time to connect before aborting.
	Defaults to \${RURUN_TIMEOUT} if set."
}

PROG_NAME=$(basename $0)
RURUN_EXEC="${RURUN_EXEC:-rurun}"
	
if [ $# -gt 0 ]; then
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
		print_usage
		exit 0
	fi
elif [ $# -lt 2 ]; then
	echo "error: bad/missing arguments" 1>&2
	exit 1
fi

while [ $# -gt 0 ]; do
	case $1 in
	--debug)
		shift 1
		export RURUN_DEBUG=1
		;;
	--pnet)
		shift 1
		export RURUN_PNET_ADDR=$1; shift 1
		;;
	--rurun)
		shift 1
		rurun_opts="$1"; shift 1
		;;
	-t|--timeout)
		shift 1
		export RURUN_TIMEOUT=$1; shift 1
		;;
	--*)
		echo "error: bad/missing arguments" 1>&2
		exit 1
		;;
	*)
		targetspec=$1; shift 1
		break
		;;
	esac
done

targets=$(get_target_ids "${targetspec}")

if [ -n "${RURUN_DEBUG}" ]; then
	echo "-----"
	echo "targetspec (${targets})"
	echo "targets (${target_ids})"
	echo "-----"
fi

ev=0
for target in ${targets}; do
	if [ -n "${RURUN_DEBUG}" ]; then
		opts="--debug"
	fi
	${RURUN_EXEC} ${rurun_opts} ${target} "$@"
	last_ev=$?
	if [ ${last_ev} -ne 0 ]; then
		ev=${last_ev}
	fi
done
exit ${ev}
